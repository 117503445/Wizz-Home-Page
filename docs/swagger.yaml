basePath: /api
definitions:
  Middlewares.login:
    properties:
      password:
        example: admin
        type: string
      username:
        example: admin
        type: string
    type: object
  httpModels.NoIdMember:
    properties:
      describe:
        description: 个人简介
        example: 超级帅的前端dalao
        type: string
      memberType:
        description: 成员类型,0 - 学生,1 - 导师
        enum:
        - 0
        - 1
        example: 0
        type: integer
      name:
        description: 成员姓名
        example: tengye
        type: string
      schoolYear:
        description: 入学年份
        example: 2017
        type: integer
      teacherInfo:
        description: 如果是老师,则有若干头衔
        example: |-
          创新校长
          制霸西电
        type: string
      urlAvatar:
        description: 成员头像图片的url
        example: http://wuygewfuyd/weiug.jpg
        type: string
    type: object
  httpModels.NoIdProduct:
    properties:
      describe:
        description: 项目介绍
        example: 大学生喜闻乐见的跨校交友平台，一键匹配聊天约游戏，一起来开黑帮你聊天&游戏两不误~
        type: string
      littleDescribe:
        description: 一句话介绍
        example: 一键约游戏
        type: string
      name:
        description: 产品名称
        example: 一起来开黑
        type: string
      partner:
        description: 合作方
        example: 腾讯
        type: string
      projectType:
        description: 项目类型,0 - 校企合作,1 - 校园合作,2 - 校内自研
        enum:
        - 0
        - 1
        type: integer
      urlAvatar:
        description: 项目图标的 Url
        example: http://qiniu.com/UrlAvatar.png
        type: string
      urlBackground:
        description: 项目背景图片的 Url
        example: http://qiniu.com/UrlBackground.png
        type: string
      urlPartnerLogo:
        description: 合作方Logo的 Url
        example: http://qiniu.com/UrlPartnerLogo.png
        type: string
      urlProCode:
        description: 二维码的 Url
        example: http://qiniu.com/UrlProCode.png
        type: string
      urlScreenshot:
        description: 项目截图的 Url
        example: http://qiniu.com/UrlScreenshot.png
        type: string
    type: object
  httpModels.NoIdStory:
    properties:
      name:
        example: 为之诞生
        type: string
      storyDescribe:
        example: 11月,前身 TgClub 诞生
        type: string
      timeStamp:
        example: 1580397149
        type: integer
    type: object
  models.Member:
    properties:
      describe:
        description: 个人简介
        example: 超级帅的前端dalao
        type: string
      id:
        description: member's id
        example: 1
        type: integer
      memberType:
        description: 成员类型,0 - 学生,1 - 导师
        enum:
        - 0
        - 1
        example: 0
        type: integer
      name:
        description: 成员姓名
        example: tengye
        type: string
      schoolYear:
        description: 入学年份
        example: 2017
        type: integer
      teacherInfo:
        description: 如果是老师,则有若干头衔
        example: |-
          创新校长
          制霸西电
        type: string
      urlAvatar:
        description: 成员头像图片的url
        example: http://wuygewfuyd/weiug.jpg
        type: string
    type: object
  models.Product:
    properties:
      describe:
        description: 项目介绍
        example: 大学生喜闻乐见的跨校交友平台，一键匹配聊天约游戏，一起来开黑帮你聊天&游戏两不误~
        type: string
      id:
        description: product's id
        example: 1
        type: integer
      littleDescribe:
        description: 一句话介绍
        example: 一键约游戏
        type: string
      name:
        description: 产品名称
        example: 一起来开黑
        type: string
      partner:
        description: 合作方
        example: 腾讯
        type: string
      projectType:
        description: 项目类型,0 - 校企合作,1 - 校园合作,2 - 校内自研
        enum:
        - 0
        - 1
        type: integer
      urlAvatar:
        description: 项目图标的 Url
        example: http://qiniu.com/UrlAvatar.png
        type: string
      urlBackground:
        description: 项目背景图片的 Url
        example: http://qiniu.com/UrlBackground.png
        type: string
      urlPartnerLogo:
        description: 合作方Logo的 Url
        example: http://qiniu.com/UrlPartnerLogo.png
        type: string
      urlProCode:
        description: 二维码的 Url
        example: http://qiniu.com/UrlProCode.png
        type: string
      urlScreenshot:
        description: 项目截图的 Url
        example: http://qiniu.com/UrlScreenshot.png
        type: string
    type: object
  models.Story:
    properties:
      id:
        description: ID is story's id
        example: 1
        type: integer
      name:
        example: 为之诞生
        type: string
      storyDescribe:
        example: 11月,前身 TgClub 诞生
        type: string
      timeStamp:
        example: 1580397149
        type: integer
    type: object
host: ali.117503445.top:8080
info:
  contact:
    email: t117503445@gmail.com
    name: "117503445"
    url: https://github.com/117503445
  description: Wizz's HomePage Backend
  license:
    name: GNU General Public License v3.0
    url: https://github.com/TGclub/Wizz-Home-Page/blob/master/LICENSE
  title: Wizz-Home-Page API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: 更改请求中的 Username 和 Password 进行登录。登陆成功以后，返回json中token字段比如说是"token":"123"，就在右上角Authorize按钮点一下，输入Bearer
        123，大小写、空格敏感。然后就能使用需要身份验证的接口啦。
      parameters:
      - description: 登录值
        in: body
        name: loginVals
        required: true
        schema:
          $ref: '#/definitions/Middlewares.login'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"expire":"2020-02-05T23:11:41+08:00","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODA5MTU1MDEsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTU4MDMxMDcwMX0.GWlmyTfCkXQYwgbtuTgVSTUSJXDcoDb_bptgRpt4HCU"}'
          schema:
            type: string
      summary: 登录
      tags:
      - 身份验证
  /image/UpToken:
    get:
      consumes:
      - application/json
      parameters:
      - description: 要上传的文件名,如 abc.png
        in: path
        name: fileName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: upToken
          schema:
            type: string
      summary: 获取一个上传文件的upToken
      tags:
      - 图片
  /logs:
    get:
      consumes:
      - application/json
      parameters:
      - default: 5
        description: 一页含有的log数量
        in: query
        name: pageSize
        required: true
        type: integer
      - default: 1
        description: 第几页
        in: query
        name: pageIndex
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"LogTotalNum":10,"logs":[{"id":2,"TimeStamp":1580620678,"RequestMethod":"PUT","Username":"admin","RequestURI":"/api/products/1","ResponseCode":"200","ModelName":"一起来开黑"}],"pageTotalNum":10}'
          schema:
            type: string
      summary: 分页获取日志
      tags:
      - 日志
  /members:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Member'
            type: array
      summary: 获取所有成员
      tags:
      - 成员
    post:
      consumes:
      - application/json
      parameters:
      - description: 成员
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/httpModels.NoIdMember'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Member'
      security:
      - ApiKeyAuth: []
      summary: 添加一个成员
      tags:
      - 成员
  /members/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 成员id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "delete success"}'
          schema:
            type: string
        "404":
          description: '{"message": "Member not found"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除一个成员
      tags:
      - 成员
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 成员id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Member'
        "404":
          description: '{"message":"Member not found"}'
          schema:
            type: string
      summary: 获取一个成员
      tags:
      - 成员
    put:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 成员id
        in: path
        name: id
        required: true
        type: integer
      - description: 成员
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/httpModels.NoIdMember'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Member'
        "404":
          description: '{"message": "Member not found"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更改一个成员
      tags:
      - 成员
  /products:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: 获取所有产品
      tags:
      - 产品
    post:
      consumes:
      - application/json
      parameters:
      - description: 产品
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/httpModels.NoIdProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      security:
      - ApiKeyAuth: []
      summary: 添加一个产品
      tags:
      - 产品
  /products/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 产品id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "delete success"}'
          schema:
            type: string
        "404":
          description: '{"message": "Product not found"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除一个产品
      tags:
      - 产品
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 产品id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: '{"message":"Product not found"}'
          schema:
            type: string
      summary: 获取一个产品
      tags:
      - 产品
    put:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 产品id
        in: path
        name: id
        required: true
        type: integer
      - description: 产品
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/httpModels.NoIdProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: '{"message": "Product not found"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更改一个产品
      tags:
      - 产品
  /stories:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Story'
            type: array
      summary: 获取所有历史事件
      tags:
      - 历史事件
    post:
      consumes:
      - application/json
      parameters:
      - description: 历史事件
        in: body
        name: story
        required: true
        schema:
          $ref: '#/definitions/httpModels.NoIdStory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Story'
      security:
      - ApiKeyAuth: []
      summary: 添加一个历史事件
      tags:
      - 历史事件
  /stories/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 历史事件id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "delete success"}'
          schema:
            type: string
        "404":
          description: '{"message": "Story not found"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除一个历史事件
      tags:
      - 历史事件
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 历史事件id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Story'
        "404":
          description: '{"message":"Story not found"}'
          schema:
            type: string
      summary: 获取一个历史事件
      tags:
      - 历史事件
    put:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 历史事件id
        in: path
        name: id
        required: true
        type: integer
      - description: 历史事件
        in: body
        name: story
        required: true
        schema:
          $ref: '#/definitions/httpModels.NoIdStory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Story'
        "404":
          description: '{"message": "Story not found"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更改一个历史事件
      tags:
      - 历史事件
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
