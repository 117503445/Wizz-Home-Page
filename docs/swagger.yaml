basePath: /api
definitions:
  models.Story:
    properties:
      id:
        description: ID this is userid
        example: 1
        type: integer
      name:
        type: string
      storyDescribe:
        type: string
      time:
        type: integer
    type: object
  route.login:
    properties:
      password:
        example: admin
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
host: ali.117503445.top:8080
info:
  contact:
    email: t117503445@gmail.com
    name: "117503445"
    url: https://github.com/117503445
  description: Wizz's HomePage Backend
  license:
    name: GNU General Public License v3.0
    url: https://github.com/TGclub/Wizz-Home-Page/blob/master/LICENSE
  title: Wizz-Home-Page API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: 更改请求中的 Username 和 Password 进行登录。登陆成功以后，返回json中token字段比如说是"token":"123"，就在右上角Authorize按钮点一下，输入Bearer
        123，大小写、空格敏感。然后就能使用需要身份验证的接口啦。
      parameters:
      - description: 登录值
        in: body
        name: loginVals
        required: true
        schema:
          $ref: '#/definitions/route.login'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"expire":"2020-02-05T23:11:41+08:00","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODA5MTU1MDEsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTU4MDMxMDcwMX0.GWlmyTfCkXQYwgbtuTgVSTUSJXDcoDb_bptgRpt4HCU"}'
          schema:
            type: string
      summary: 登录
      tags:
      - auth
  /stories:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Story'
      summary: 获取所有历史事件
      tags:
      - stories
    post:
      consumes:
      - application/json
      parameters:
      - description: 历史事件
        in: body
        name: story
        required: true
        schema:
          $ref: '#/definitions/models.Story'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Story'
      security:
      - ApiKeyAuth: []
      summary: 添加一个历史事件
      tags:
      - stories
  /stories/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 历史事件id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Story'
      security:
      - ApiKeyAuth: []
      summary: 删除一个历史事件
      tags:
      - stories
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 历史事件id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Story'
      summary: 获取一个历史事件
      tags:
      - stories
    put:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 历史事件id
        in: path
        name: id
        required: true
        type: integer
      - description: 历史事件
        in: body
        name: story
        required: true
        schema:
          $ref: '#/definitions/models.Story'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Story'
      security:
      - ApiKeyAuth: []
      summary: 更改一个历史事件
      tags:
      - stories
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
